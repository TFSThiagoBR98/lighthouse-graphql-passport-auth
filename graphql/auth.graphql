input LoginInput {
    username: String!
    password: String!
    otp: String
}

input RefreshTokenInput {
    refresh_token: String
}

type User {
    id: ID!
    name: String!
    email: String!
}

type AuthPayload {
    access_token: String
    refresh_token: String
    expires_in: Int
    token_type: String
    user: User
}

type RefreshTokenPayload {
    access_token: String!
    refresh_token: String!
    expires_in: Int!
    token_type: String!
}

type LogoutResponse {
    status: String!
    message: String
}

type ForgotPasswordResponse {
    status: String!
    message: String
}

type RegisterResponse {
    tokens: AuthPayload
    status: RegisterStatuses!
}

type UpdatePasswordResponse {
    status: String!
    message: String
}

enum RegisterStatuses {
    MUST_VERIFY_EMAIL
    SUCCESS
}

input ForgotPasswordInput {
    email: String! @rules(apply: ["required", "email"])
}

input NewPasswordWithCodeInput {
    email: String! @rules(apply: ["required", "email"])
    token: String! @rules(apply: ["required", "string"])
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    password_confirmation: String!
}

input RegisterInput {
    name: String! @rules(apply: ["required", "string"])
    email: String! @rules(apply: ["required", "email", "unique:users,email"])
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    password_confirmation: String!
}

input SocialLoginInput {
    provider: String! @rules(apply: ["required"])
    token: String! @rules(apply: ["required"])
    name: NameInput
}

input NameInput {
    firstName: String
    lastName: String
}

input VerifyEmailInput {
    token: String!
}

input UpdatePasswordInput {
    old_password: String!
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    password_confirmation: String!
}

type DeleteAccountResponse {
    status: String!
    message: String
}

input Validate2FAInput {
    otp: String!
}

type Validate2FAResponse {
    status: String!
    message: String
}

type Prepare2FAResponse {
    qrCode: String!
    uri: String!
    string: String!
}

type Activate2FAResponse {
    status: String!
    message: String
    recoveryCodes: [String!]!
}

type Deactivate2FAResponse {
    status: String!
    message: String
}

type Get2FARecoveryCodesResponse {
    recoveryCodes: [String!]!
}

type Generate2FARecoveryCodesResponse {
    status: String!
    recoveryCodes: [String!]!
}

extend type Query {
    get2FARecoveryCodes: Get2FARecoveryCodesResponse! @field(resolver: "TFSThiagoBR98\\LighthouseGraphQLPassport\\GraphQL\\Queries\\Get2FARecoveryCodes") @guard(with: ["api"])
}

extend type Mutation {
    login(input: LoginInput @spread): AuthPayload! @field(resolver: "TFSThiagoBR98\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve")
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload! @field(resolver: "TFSThiagoBR98\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
    logout: LogoutResponse! @field(resolver: "TFSThiagoBR98\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
    forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "TFSThiagoBR98\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
    updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @field(resolver: "TFSThiagoBR98\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
    register(input: RegisterInput @spread): RegisterResponse! @field(resolver: "TFSThiagoBR98\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve")
    socialLogin(input: SocialLoginInput! @spread): AuthPayload! @field(resolver: "TFSThiagoBR98\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve")
    verifyEmail(input: VerifyEmailInput! @spread): AuthPayload! @field(resolver: "TFSThiagoBR98\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve")
    updatePassword(input: UpdatePasswordInput! @spread): UpdatePasswordResponse! @field(resolver: "TFSThiagoBR98\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve") @guard(with: ["api"])
    deleteAccount: DeleteAccountResponse! @field(resolver: "TFSThiagoBR98\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\DeleteUser@resolve") @guard(with: ["api"])
    validate2FA(input: Validate2FAInput! @spread): Validate2FAResponse! @field(resolver: "TFSThiagoBR98\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Validate2FA") @guard(with: ["api"])
    generate2FARecoveryCodes: Generate2FARecoveryCodesResponse! @field(resolver: "TFSThiagoBR98\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Generate2FARecoveryCodes") @guard(with: ["api"])
    prepare2FA: Prepare2FAResponse! @field(resolver: "TFSThiagoBR98\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Prepare2FA") @guard(with: ["api"])
    activate2FA(input: Validate2FAInput! @spread): Activate2FAResponse! @field(resolver: "TFSThiagoBR98\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Activate2FA") @guard(with: ["api"])
    deactivate2FA(input: Validate2FAInput! @spread): Deactivate2FAResponse! @field(resolver: "TFSThiagoBR98\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Deactivate2FA") @guard(with: ["api"])
}
